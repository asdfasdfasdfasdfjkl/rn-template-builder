name: Build React Native Android App

on:
  workflow_dispatch:
    inputs:
      build_id:
        description: 'Build ID'
        required: true
        type: string
      app_name:
        description: 'App Name'
        required: true
        type: string
      build_type:
        description: 'Build Type'
        required: false
        default: 'release'
        type: choice
        options:
          - release
          - debug
      output_type:
        description: 'Output Type'
        required: false
        default: 'apk'
        type: choice
        options:
          - apk
          - aab
      platform:
        description: 'Platform'
        required: false
        default: 'android'
        type: string

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Read build configuration
        id: config
        run: |
          echo "Loading build configuration..."
          BUILD_ID="${{ github.event.inputs.build_id }}"
          APP_NAME="${{ github.event.inputs.app_name }}"
          WEBSITE_ADDRESS="${{ github.event.inputs.website_address || 'default.com' }}"
          VERSION_CODE="${{ github.event.inputs.version_code || '1' }}"
          VERSION_NAME="${{ github.event.inputs.version_name || '1.0.0' }}"
          NAME_SPACE="${{ github.event.inputs.name_space || 'com.example.app' }}"
          BUILD_TYPE="${{ github.event.inputs.build_type || 'release' }}"
          OUTPUT_TYPE="${{ github.event.inputs.output_type || 'apk' }}"
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "WEBSITE_ADDRESS=$WEBSITE_ADDRESS" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "NAME_SPACE=$NAME_SPACE" >> $GITHUB_ENV
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV
          echo "OUTPUT_TYPE=$OUTPUT_TYPE" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --legacy-peer-deps
          echo "Dependencies installed successfully"

      - name: Apply template customizations
        shell: bash
        run: |
          echo "Applying template customizations..."
          sed -i "s|{{website_address}}|${{ env.WEBSITE_ADDRESS }}|g" App.tsx
          sed -i "s|{{app_name}}|${{ env.APP_NAME }}|g" app.json
          sed -i "s|{{version_code}}|${{ env.VERSION_CODE }}|g" android/app/build.gradle
          sed -i "s|{{version_name}}|${{ env.VERSION_NAME }}|g" android/app/build.gradle
          sed -i "s|{{name_space}}|${{ env.NAME_SPACE }}|g" android/app/build.gradle
          echo "Template customizations applied successfully"

      - name: Install Sharp for icon processing
        if: ${{ env.APP_ICON != 'null' }}
        run: |
          echo "Installing Sharp for icon processing..."
          npm install sharp --no-save

      - name: Process custom app icon
        if: ${{ env.APP_ICON != 'null' }}
        run: |
          echo "Processing custom app icon..."
          node -e "
            const sharp = require('sharp');
            const fs = require('fs');
            const appIcon = '${{ env.APP_ICON }}';
            const base64Data = appIcon.replace(/^data:image\\/\\w+;base64,/, '');
            const buffer = Buffer.from(base64Data, 'base64');
            const androidSizes = [
              { size: 192, path: 'android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png' },
              { size: 144, path: 'android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png' },
              { size: 96, path: 'android/app/src/main/res/mipmap-xhdpi/ic_launcher.png' },
              { size: 72, path: 'android/app/src/main/res/mipmap-hdpi/ic_launcher.png' },
              { size: 48, path: 'android/app/src/main/res/mipmap-mdpi/ic_launcher.png' }
            ];
            androidSizes.forEach(async (config) => {
              const dir = path.dirname(config.path);
              if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
              }
              await sharp(buffer)
                .resize(config.size, config.size)
                .png()
                .toFile(config.path);
            });
          "
          echo "Custom app icon processed and generated for all densities"

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Clean previous builds
        run: |
          cd android
          ./gradlew clean

      - name: Build Android App
        run: |
          cd android
          if [ "${{ env.BUILD_TYPE }}" == "release" ]; then
            if [ "${{ env.OUTPUT_TYPE }}" == "aab" ]; then
              ./gradlew bundleRelease
            else
              ./gradlew assembleRelease
            fi
          else
            if [ "${{ env.OUTPUT_TYPE }}" == "aab" ]; then
              ./gradlew bundleDebug
            else
              ./gradlew assembleDebug
            fi
          fi

      - name: Prepare build artifacts
        run: |
          echo "status=Preparing build artifacts..." >> $GITHUB_OUTPUT
          BUILD_ID="${BUILD_ID:-${{ github.event.inputs.build_id }}}"
          APP_NAME="${APP_NAME:-${{ github.event.inputs.app_name }}}"
          BUILD_TYPE="${BUILD_TYPE:-${{ github.event.inputs.build_type }}}"
          OUTPUT_TYPE="${OUTPUT_TYPE:-${{ github.event.inputs.output_type }}}"
          mkdir -p artifacts
          BUILT_FILE="android/app/build/outputs/${{ env.OUTPUT_TYPE }}/${{ env.BUILD_TYPE }}/app-${{ env.BUILD_TYPE }}.${{ env.OUTPUT_TYPE }}"
          ARTIFACT_NAME="app-${BUILD_TYPE}-${BUILD_ID}.${OUTPUT_TYPE}"

          if [ -f "$BUILT_FILE" ]; then
            cp "$BUILT_FILE" "artifacts/$ARTIFACT_NAME"
            echo "Copied $BUILT_FILE to artifacts/$ARTIFACT_NAME"
          else
            echo "Error: Built file not found at $BUILT_FILE"
            exit 1
          fi

          cat > artifacts/build-info.json << EOF
          {
            "buildId": "$BUILD_ID",
            "appName": "$APP_NAME", 
            "buildType": "$BUILD_TYPE",
            "outputType": "$OUTPUT_TYPE",
            "platform": "android",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "versionCode": "${VERSION_CODE:-1}",
            "versionName": "${VERSION_NAME:-1.0.0}",
            "namespace": "${NAME_SPACE:-com.example.app}",
            "fileSize": "$(stat -c%s "artifacts/$ARTIFACT_NAME")",
            "fileName": "$ARTIFACT_NAME",
            "hasCustomIcon": "${HAS_CUSTOM_ICON:-false}"
          }
          EOF

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Upload to AWS S3
        run: |
          echo "status=Uploading artifacts to AWS S3..." >> $GITHUB_OUTPUT
          BUILD_ID="${BUILD_ID:-${{ github.event.inputs.build_id }}}"
          S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}"
          S3_PREFIX="builds/${BUILD_ID}"

          if [ -z "$S3_BUCKET" ]; then
            echo "Error: AWS_S3_BUCKET secret not configured"
            exit 1
          fi

          aws s3 cp artifacts/ s3://${S3_BUCKET}/${S3_PREFIX}/ --recursive

          APP_DOWNLOAD_URL=$(aws s3 presign s3://${S3_BUCKET}/${S3_PREFIX}/${ARTIFACT_NAME} --expires-in 604800)
          INFO_DOWNLOAD_URL=$(aws s3 presign s3://${S3_BUCKET}/${S3_PREFIX}/build-info.json --expires-in 604800)

          echo "APP_DOWNLOAD_URL=$APP_DOWNLOAD_URL" >> $GITHUB_ENV
          echo "INFO_DOWNLOAD_URL=$INFO_DOWNLOAD_URL" >> $GITHUB_ENV

      - name: Update build status
        if: always()
        run: |
          BUILD_ID="${BUILD_ID:-${{ github.event.inputs.build_id }}}"
          S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}"
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="completed"
            CONCLUSION="success"
            MESSAGE="Build completed successfully"
          else
            STATUS="completed"
            CONCLUSION="failure"
            MESSAGE="Build failed"
          fi

          cat > build-status.json << EOF
          {
            "buildId": "$BUILD_ID",
            "status": "$STATUS",
            "conclusion": "$CONCLUSION",
            "message": "$MESSAGE",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "downloadUrl": "${APP_DOWNLOAD_URL:-null}",
            "infoUrl": "${INFO_DOWNLOAD_URL:-null}"
          }
          EOF

          aws s3 cp build-status.json s3://${S3_BUCKET}/status/${BUILD_ID}.json

      - name: Cleanup and delete repository
        if: always()
        run: |
          echo "status=Cleaning up and deleting repository..." >> $GITHUB_OUTPUT
          echo "Repository cleanup will be handled by the API caller"
