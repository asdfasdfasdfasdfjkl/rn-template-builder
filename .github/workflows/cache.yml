name: Setup Build Cache

on:
  workflow_dispatch:
    inputs:
      force_refresh:
        description: 'Force refresh all caches'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  ANDROID_HOME: /opt/android-sdk-linux
  ANDROID_SDK_ROOT: /opt/android-sdk-linux

jobs:
  setup-cache:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Node.js Setup and NPM Cache
      - name: "⚙️ Setup Node.js ${{ env.NODE_VERSION }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: "📦 Restore NPM Dependencies Cache"
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-npm-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ env.NODE_VERSION }}-
            ${{ runner.os }}-npm-

      - name: "📦 Install NPM Dependencies"
        if: steps.npm-cache.outputs.cache-hit != 'true' || github.event.inputs.force_refresh == 'true'
        run: |
          echo "Installing npm dependencies..."
          npm ci --legacy-peer-deps --no-audit --no-fund

      # Java JDK Setup
      - name: "☕ Setup Java JDK ${{ env.JAVA_VERSION }}"
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      # Android SDK Setup
      - name: "🤖 Setup Android SDK"
        uses: android-actions/setup-android@v3

      - name: "📦 Cache Android SDK"
        uses: actions/cache@v4
        id: android-sdk-cache
        with:
          path: |
            ${{ env.ANDROID_HOME }}
            ~/.android
          key: ${{ runner.os }}-android-sdk-${{ env.JAVA_VERSION }}-${{ hashFiles('android/build.gradle', 'android/app/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-android-sdk-${{ env.JAVA_VERSION }}-
            ${{ runner.os }}-android-sdk-

      # Gradle Wrapper Cache
      - name: "📦 Cache Gradle Wrapper"
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-

      # Gradle Dependencies Cache
      - name: "📦 Cache Gradle Dependencies"
        uses: actions/cache@v4
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/daemon
            android/.gradle
          key: ${{ runner.os }}-gradle-deps-${{ env.JAVA_VERSION }}-${{ hashFiles('android/build.gradle', 'android/app/build.gradle', 'android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-deps-${{ env.JAVA_VERSION }}-
            ${{ runner.os }}-gradle-deps-

      - name: "🔧 Make Gradlew Executable"
        run: chmod +x android/gradlew

      # Download Gradle Dependencies
      - name: "⬇️ Download Gradle Dependencies"
        if: steps.gradle-cache.outputs.cache-hit != 'true' || github.event.inputs.force_refresh == 'true'
        run: |
          cd android
          echo "Downloading Gradle dependencies..."
          ./gradlew dependencies --no-daemon --stacktrace --parallel

      # Metro Cache
      - name: "📦 Cache Metro Bundler"
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.cache/metro
            ${{ runner.temp }}/metro-cache
          key: ${{ runner.os }}-metro-${{ hashFiles('metro.config.js', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-metro-

      # React Native Cache
      - name: "📦 Cache React Native Components"
        uses: actions/cache@v4
        with:
          path: |
            node_modules/@react-native-community
            node_modules/react-native
          key: ${{ runner.os }}-rn-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-rn-

      # Native Dependencies Cache
      - name: "📦 Cache Native Dependencies"
        uses: actions/cache@v4
        id: native-deps-cache
        with:
          path: |
            node_modules/sharp
            node_modules/@img
          key: ${{ runner.os }}-native-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-native-deps-

      - name: "🖼️ Install Sharp for Icon Processing"
        if: steps.native-deps-cache.outputs.cache-hit != 'true' || github.event.inputs.force_refresh == 'true'
        run: |
          echo "Installing Sharp for icon processing..."
          npm install sharp --no-save

      # Kotlin Compiler Cache
      - name: "📦 Cache Kotlin Compiler"
        uses: actions/cache@v4
        with:
          path: |
            ~/.konan
            ~/.kotlin
          key: ${{ runner.os }}-kotlin-${{ hashFiles('android/build.gradle', 'android/app/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-kotlin-

      # NEW: Pre-build Android App with Dummy Data
      - name: "🏗️ Pre-build Android App (Warm Build Cache)"
        id: prebuild
        run: |
          echo "Creating dummy build configuration for cache warming..."
          
          # Create dummy build-config.json
          cat > build-config.json << 'EOF'
          {
            "website_address": "https://example.com",
            "app_name": "CacheWarmer",
            "version_code": "1",
            "version_name": "1.0.0",
            "name_space": "com.cachewarmer.app",
            "has_custom_icon": false,
            "build_type": "release",
            "output_type": "apk",
            "platform": "android",
            "permissions": {},
            "created_at": "2025-01-01T00:00:00Z"
          }
          EOF
          
          echo "Applying minimal template customizations..."
          
          # Apply minimal replacements (just enough to build)
          sed -i 's/rn_project_template/cachewarmer/g' android/settings.gradle
          sed -i 's/rn_project_template/cachewarmer/g' app.json
          sed -i 's/"rn_project_template"/"cachewarmer"/g' android/app/src/main/java/com/rn_project_template/MainActivity.kt
          sed -i 's/{{name_space}}/com.cachewarmer.app/g' android/app/src/main/java/com/rn_project_template/MainActivity.kt
          sed -i 's/{{website_address}}/https:\/\/example.com/g' App.tsx
          sed -i 's/{{app_name}}/CacheWarmer/g' app.json
          sed -i 's/{{version_code}}/1/g' android/app/build.gradle
          sed -i 's/rn_project_template/CacheWarmer/g' android/app/src/main/res/values/strings.xml
          sed -i 's/{{version_name}}/1.0.0/g' android/app/build.gradle
          sed -i 's/com.rn_project_template/com.cachewarmer.app/g' android/app/build.gradle
          sed -i 's/com.rn_project_template/com.cachewarmer.app/g' android/app/src/main/java/com/rn_project_template/MainActivity.kt
          sed -i 's/com.rn_project_template/com.cachewarmer.app/g' android/app/src/main/java/com/rn_project_template/MainApplication.kt
          sed -i 's/{{name_space}}/com.cachewarmer.app/g' android/app/src/main/AndroidManifest.xml
          
          # Add basic permissions (replace placeholder)
          sed -i 's/{{PERMISSIONS_PLACEHOLDER}}/<uses-permission android:name="android.permission.INTERNET" \/>\n    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" \/>/g' android/app/src/main/AndroidManifest.xml
          
          # Enable cleartext traffic ONLY if not already present
          MANIFEST_PATH="android/app/src/main/AndroidManifest.xml"
          if ! grep -q "android:usesCleartextTraffic" "$MANIFEST_PATH"; then
            sed -i 's/<application/<application\n        android:usesCleartextTraffic="true"/g' "$MANIFEST_PATH"
          fi
          
          # Restructure Java package
          mkdir -p android/app/src/main/java/com/cachewarmer/app
          cp -r android/app/src/main/java/com/rn_project_template/* android/app/src/main/java/com/cachewarmer/app/
          
          cd android
          
          echo "Building Android app to warm caches..."
          export GRADLE_OPTS="-Xmx4g -XX:MaxMetaspaceSize=512m -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true"
          export _JAVA_OPTIONS="-Xmx3g"
          
          # Build both debug and release to cache both
          ./gradlew assembleRelease assembleDebug --build-cache --parallel --no-daemon --stacktrace
          
          echo "✓ Pre-build complete - build caches warmed!"

      # NEW: Cache Android Build Outputs
      - name: "📦 Cache Android Build Outputs"
        uses: actions/cache@v4
        with:
          path: |
            android/app/build/intermediates
            android/app/build/tmp
            android/app/.cxx
            android/.gradle/buildOutputCleanup
          key: ${{ runner.os }}-android-build-${{ hashFiles('android/build.gradle', 'android/app/build.gradle', 'android/app/src/**/*.kt', 'android/app/src/**/*.java') }}
          restore-keys: |
            ${{ runner.os }}-android-build-

      # NEW: Cache Compiled Kotlin/Java Classes
      - name: "📦 Cache Compiled Classes"
        uses: actions/cache@v4
        with:
          path: |
            android/app/build/tmp/kotlin-classes
            android/app/build/intermediates/compile_app_classes_jar
            android/app/build/intermediates/compile_library_classes_jar
          key: ${{ runner.os }}-compiled-classes-${{ hashFiles('android/app/src/**/*.kt', 'android/app/src/**/*.java') }}
          restore-keys: |
            ${{ runner.os }}-compiled-classes-

      # NEW: Cache Dex Files
      - name: "📦 Cache Dex Files"
        uses: actions/cache@v4
        with:
          path: |
            android/app/build/intermediates/dex
            android/app/build/intermediates/external_libs_dex
          key: ${{ runner.os }}-dex-${{ hashFiles('android/app/build.gradle', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-dex-

      # Verification and Summary
      - name: "✅ Verify Cache Setup and Generate Summary"
        run: |
          echo "## Build Cache Setup Complete 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Cache Status:" >> $GITHUB_STEP_SUMMARY
          
          # Check npm cache
          if [ "${{ steps.npm-cache.outputs.cache-hit }}" == "true" ]; then
            echo "- ✅ NPM dependencies: CACHE HIT" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🔄 NPM dependencies: CACHE MISS (newly cached)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check gradle cache
          if [ "${{ steps.gradle-cache.outputs.cache-hit }}" == "true" ]; then
            echo "- ✅ Gradle dependencies: CACHE HIT" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🔄 Gradle dependencies: CACHE MISS (newly cached)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check Android SDK cache
          if [ "${{ steps.android-sdk-cache.outputs.cache-hit }}" == "true" ]; then
            echo "- ✅ Android SDK: CACHE HIT" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🔄 Android SDK: CACHE MISS (newly cached)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check native dependencies
          if [ "${{ steps.native-deps-cache.outputs.cache-hit }}" == "true" ]; then
            echo "- ✅ Native dependencies: CACHE HIT" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🔄 Native dependencies: CACHE MISS (newly cached)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- ✅ Android build outputs: NEWLY CACHED" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Compiled classes: NEWLY CACHED" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dex files: NEWLY CACHED" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installed Components:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Node.js ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Java JDK ${{ env.JAVA_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Android SDK with Platform Tools" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Gradle wrapper and dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Metro bundler cache prepared" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Sharp image processing library" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Pre-built Android app (warm build cache)" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Cache Sizes:" >> $GITHUB_STEP_SUMMARY
          
          # Verify paths exist and show sizes
          if [ -d "node_modules" ]; then
            NODE_SIZE=$(du -sh node_modules 2>/dev/null | cut -f1 || echo "N/A")
            echo "- Node modules: $NODE_SIZE" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "$HOME/.gradle" ]; then
            GRADLE_SIZE=$(du -sh ~/.gradle 2>/dev/null | cut -f1 || echo "N/A")
            echo "- Gradle cache: $GRADLE_SIZE" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "$ANDROID_HOME" ]; then
            ANDROID_SIZE=$(du -sh $ANDROID_HOME 2>/dev/null | cut -f1 || echo "N/A")
            echo "- Android SDK: $ANDROID_SIZE" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "android/app/build" ]; then
            BUILD_SIZE=$(du -sh android/app/build 2>/dev/null | cut -f1 || echo "N/A")
            echo "- Android build outputs: $BUILD_SIZE" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🚀 Cache setup complete with pre-built app! Build workflows will now run in ~1-2 minutes.**" >> $GITHUB_STEP_SUMMARY

      # Store Cache Metadata
      - name: "📊 Store Cache Metadata"
        run: |
          mkdir -p .github-cache
          cat > .github-cache/cache-info.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run": "${{ github.run_id }}",
            "node_version": "${{ env.NODE_VERSION }}",
            "java_version": "${{ env.JAVA_VERSION }}",
            "force_refresh": "${{ github.event.inputs.force_refresh }}",
            "prebuild_completed": true,
            "cache_results": {
              "npm_hit": "${{ steps.npm-cache.outputs.cache-hit }}",
              "gradle_hit": "${{ steps.gradle-cache.outputs.cache-hit }}",
              "android_sdk_hit": "${{ steps.android-sdk-cache.outputs.cache-hit }}",
              "native_deps_hit": "${{ steps.native-deps-cache.outputs.cache-hit }}"
            }
          }
          EOF
          
          echo "✅ Cache setup completed successfully with pre-built app"
          echo "📊 Cache metadata saved for future reference"
